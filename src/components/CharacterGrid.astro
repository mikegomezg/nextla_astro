---
import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

// Import character images
import silas from "../assets/characters/silas.png";
import victoria from "../assets/characters/victoria.png";
import mercedes from "../assets/characters/mercedes.png";
import john from "../assets/characters/john.png";
import enrique from "../assets/characters/enrique.png";
import kate from "../assets/characters/cors.png";

interface Character {
    name: string;
    role: string;
    bio: string;
    image?: string;
}

const charactersContent = await getEntry("landing", "characters");

if (!charactersContent) {
    throw new Error(
        "Characters content not found: characters entry missing from landing collection",
    );
}

const { characters = [] } = charactersContent.data;

// Map of character names to imported images with proper typing
const characterImages: Record<string, ImageMetadata> = {
    Silas: silas,
    Victoria: victoria,
    Mercedes: mercedes,
    John: john,
    Enrique: enrique,
    Kate: kate,
};

// Create color variations for character avatars (fallback)
const bgColors = [
    "from-primary/30 to-secondary/30",
    "from-secondary/30 to-highlight/30",
    "from-highlight/30 to-accent/30",
    "from-accent/30 to-primary/30",
    "from-primary/30 to-highlight/30",
    "from-secondary/30 to-accent/30",
];

// Helper function to safely get character image
const getCharacterImage = (name: string): ImageMetadata | undefined => {
    return characterImages[name];
};
---

<section
    id="characters"
    aria-labelledby="characters-heading"
    class="py-16 px-6 bg-featherbg"
>
    <div class="max-w-6xl mx-auto">
        <h2
            id="characters-heading"
            class="text-2xl md:text-3xl font-bold mb-8 text-center text-secondary"
        >
            Characters
        </h2>

        <!-- Desktop grid view -->
        <div class="hidden md:grid grid-cols-3 gap-6">
            {
                characters.slice(0, 6).map((character: Character, index: number) => (
                    <div class="bg-surface border border-secondary/20 p-5 rounded-lg flex flex-col items-center text-center shadow-md hover:shadow-lg transition-shadow">
                        <div class="w-40 h-40 mb-4 overflow-hidden rounded-full">
                            {getCharacterImage(character.name) ? (
                                <Image
                                    src={getCharacterImage(character.name)!}
                                    alt={`${character.name} - ${character.role}`}
                                    width={160}
                                    height={160}
                                    class="object-cover w-full h-full"
                                    loading="eager"
                                />
                            ) : (
                                <div
                                    class={`w-full h-full rounded-full bg-gradient-to-br ${bgColors[index % bgColors.length]} flex items-center justify-center`}
                                >
                                    <span class="text-3xl font-bold text-textDefault">
                                        {character.name.charAt(0)}
                                    </span>
                                </div>
                            )}
                        </div>
                        <h3 class="text-xl font-semibold text-highlight mb-1">
                            {character.name}
                        </h3>
                        <p class="text-accent mb-3 text-sm">{character.role}</p>
                        <p class="text-textDefault text-sm">{character.bio}</p>
                    </div>
                ))
            }
        </div>

        <!-- Mobile scroll view -->
        <div class="md:hidden overflow-x-auto pb-4 -mx-4 px-4">
            <div class="flex space-x-4" style="min-width: min-content">
                {
                    characters.slice(0, 6).map((character: Character, index: number) => (
                        <div
                            class="bg-surface border border-secondary/20 p-4 rounded-lg flex flex-col items-center text-center shadow-md"
                            style="min-width: 220px; max-width: 280px;"
                        >
                            <div class="w-28 h-28 mb-3 overflow-hidden rounded-full">
                                {getCharacterImage(character.name) ? (
                                    <Image
                                        src={getCharacterImage(character.name)!}
                                        alt={`${character.name} - ${character.role}`}
                                        width={112}
                                        height={112}
                                        class="object-cover w-full h-full"
                                        loading="eager"
                                    />
                                ) : (
                                    <div
                                        class={`w-full h-full rounded-full bg-gradient-to-br ${bgColors[index % bgColors.length]} flex items-center justify-center`}
                                    >
                                        <span class="text-2xl font-bold text-textDefault">
                                            {character.name.charAt(0)}
                                        </span>
                                    </div>
                                )}
                            </div>
                            <h3 class="text-lg font-semibold text-highlight mb-1">
                                {character.name}
                            </h3>
                            <p class="text-accent mb-2 text-xs">{character.role}</p>
                            <p class="text-textDefault text-xs line-clamp-3">
                                {character.bio}
                            </p>
                        </div>
                    ))
                }
            </div>
        </div>

        <!-- Navigation indicators for mobile -->
        <div class="flex justify-center space-x-2 mt-4 md:hidden">
            <span class="w-2 h-2 rounded-full bg-primary"></span>
            <span class="w-2 h-2 rounded-full bg-textMuted/20"></span>
            <span class="w-2 h-2 rounded-full bg-textMuted/20"></span>
        </div>

        <!-- See all characters button -->
        <div class="text-center mt-8">
            <button
                class="bg-secondary text-textDefault px-6 py-2 rounded-lg font-medium hover:bg-opacity-90 transition-colors"
            >
                See All Characters
            </button>
        </div>
    </div>
</section>

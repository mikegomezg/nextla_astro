---
// src/components/visualization/AttentionFlow.astro
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div class={`attention-flow-container ${className}`}>
  <svg class="attention-flow" viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg">
    <!-- Base nodes representing capabilities -->
    <g class="capability-nodes">
      <circle cx="200" cy="100" r="40" class="capability-node" data-capability="analysis" />
      <circle cx="400" cy="200" r="50" class="capability-node" data-capability="communication" />
      <circle cx="600" cy="150" r="45" class="capability-node" data-capability="creation" />
    </g>
    
    <!-- Flow paths between capabilities -->
    <g class="flow-paths">
      <path class="flow-path" d="M240 100 C 300 50, 350 120, 360 180" />
      <path class="flow-path" d="M450 200 C 500 220, 520 180, 560 170" />
    </g>
    
    <!-- Flow particles that animate along the paths -->
    <g class="flow-particles"></g>
    
    <!-- Labels for capabilities -->
    <g class="capability-labels">
      <text x="200" y="100" text-anchor="middle" dominant-baseline="middle" class="capability-label">Analysis</text>
      <text x="400" y="200" text-anchor="middle" dominant-baseline="middle" class="capability-label">Communication</text>
      <text x="600" y="150" text-anchor="middle" dominant-baseline="middle" class="capability-label">Creation</text>
    </g>
  </svg>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const svg = document.querySelector('.attention-flow');
    const paths = svg.querySelectorAll('.flow-path');
    const particlesContainer = svg.querySelector('.flow-particles');
    
    // Function to create a particle
    function createParticle(path, index) {
      const particle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      particle.setAttribute('class', 'flow-particle');
      particle.setAttribute('r', '3');
      particlesContainer.appendChild(particle);
      
      // Animation setup
      const pathLength = path.getTotalLength();
      let position = 0;
      let forward = true;
      
      // Randomize the starting position a bit
      position = Math.random() * pathLength / 3;
      
      // Animation function
      function animateParticle() {
        // Calculate the point at the current position
        const point = path.getPointAtLength(position);
        
        // Update the circle position
        particle.setAttribute('cx', point.x);
        particle.setAttribute('cy', point.y);
        
        // Move the position for the next frame
        if (forward) {
          position += 1;
          if (position >= pathLength) {
            position = pathLength;
            forward = false;
          }
        } else {
          position -= 1;
          if (position <= 0) {
            position = 0;
            forward = true;
          }
        }
        
        // Request the next frame
        requestAnimationFrame(animateParticle);
      }
      
      // Start the animation
      animateParticle();
    }
    
    // Create particles for each path
    paths.forEach((path, index) => {
      // Create 2 particles per path for a more dynamic feel
      createParticle(path, index);
      setTimeout(() => {
        createParticle(path, index);
      }, 1000 + Math.random() * 500);
    });
  });
</script>

<style>
  .attention-flow-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .attention-flow {
    width: 100%;
    height: auto;
  }
  
  .capability-node {
    fill: var(--color-navy-500, #1A237E);
    stroke: var(--color-jade-300, #9BC3B5);
    stroke-width: 2;
    transition: all 0.3s ease;
    opacity: 0.8;
  }
  
  .capability-node:hover {
    fill: var(--color-navy-400, #2A34A4);
    stroke: var(--color-jade-400, #37865F);
    opacity: 1;
  }
  
  .flow-path {
    fill: none;
    stroke: var(--color-jade-500, #2E6E4E);
    stroke-width: 2;
    stroke-dasharray: 4 2;
    opacity: 0.6;
  }
  
  .flow-particle {
    fill: var(--color-accent-500, #A63D2F);
    r: 3;
  }
  
  .capability-label {
    font-family: sans-serif;
    font-size: 14px;
    fill: white;
    pointer-events: none;
  }
</style> 
---
interface Props {
  severity?: 'minor' | 'moderate' | 'severe' | 'critical';
  size?: 'sm' | 'md' | 'lg';
  variant?: 'technical' | 'organic';
  animated?: boolean;
  className?: string;
}

const { 
  severity = 'minor', 
  size = 'md',
  variant = 'technical',
  animated = false,
  className = ''
} = Astro.props;

// Map severity to colors using TailwindCSS color system
const colorMap = {
  minor: {
    primary: 'var(--color-accent-500)', // Earthy red accent
    secondary: 'var(--color-accent-400)',
    highlight: 'var(--color-accent-300)'
  },
  moderate: {
    primary: 'var(--color-secondary-500)', // Jade green 
    secondary: 'var(--color-secondary-400)',
    highlight: 'var(--color-secondary-300)'
  },
  severe: {
    primary: '#FFC107', // Alert color
    secondary: '#FFD54F',
    highlight: '#FFECB3'
  },
  critical: {
    primary: 'var(--color-primary-800)', // Deep navy
    secondary: 'var(--color-primary-400)',
    highlight: 'var(--color-accent-500)'
  }
};

// Map size to dimensions - smaller for mobile
const sizeMap = {
  sm: {
    width: {
      default: 32,
      sm: 40
    },
    height: {
      default: 48,
      sm: 60
    }
  },
  md: {
    width: {
      default: 48,
      sm: 60
    },
    height: {
      default: 72,
      sm: 90
    }
  },
  lg: {
    width: {
      default: 64,
      sm: 80
    },
    height: {
      default: 96,
      sm: 120
    }
  }
};

const colors = colorMap[severity];
const dimensions = sizeMap[size];

// Animation class based on variant
const animationClass = animated 
  ? variant === 'technical' 
    ? 'animate-pulse-slow' 
    : 'animate-float'
  : '';

// Add CSS variables for colors to enable theme changes
const cssVars = `
  --color-primary-400: #2A34A4;
  --color-primary-800: #0A0C35;
  --color-secondary-300: #9BC3B5;
  --color-secondary-400: #37865F;
  --color-secondary-500: #2E6E4E;
  --color-accent-300: #D6A6A0;
  --color-accent-400: #C24B3A;
  --color-accent-500: #A63D2F;
`;
---

<style set:html={cssVars}></style>

{variant === 'technical' && (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 100 300" 
    width={dimensions.width.default}
    height={dimensions.height.default}
    class={`inline-block ${animationClass} ${className} sm:w-[${dimensions.width.sm}px] sm:h-[${dimensions.height.sm}px]`}
    role="img"
    aria-label={`${severity} circuit feather`}
  >
    <!-- Simplified curved feather path inspired by the provided design -->
    <path 
      d="M50,10 C80,100 100,200 100,290 C50,240 0,190 50,10" 
      stroke={colors.primary} 
      stroke-width="2" 
      fill="none"
    />
    
    <!-- Central shaft with simpler design -->
    <path 
      d="M50,10 C65,100 70,200 75,290" 
      stroke={colors.secondary} 
      stroke-width="1.5"
      fill="none"
    />
    
    <!-- Circuit nodes along the path - reduced for better mobile performance -->
    <circle cx="50" cy="30" r="2" fill={colors.highlight} />
    <circle cx="60" cy="100" r="2" fill={colors.highlight} />
    <circle cx="70" cy="170" r="2" fill={colors.highlight} />
    <circle cx="75" cy="240" r="2" fill={colors.highlight} />
    
    <!-- Circuit paths - reduced for better mobile performance -->
    <path d="M50,30 L75,40" stroke={colors.secondary} stroke-width="1" />
    <path d="M60,100 L85,110" stroke={colors.secondary} stroke-width="1" />
    <path d="M70,170 L95,180" stroke={colors.secondary} stroke-width="1" />
    <path d="M75,240 L95,250" stroke={colors.secondary} stroke-width="1" />
    
    <!-- Circuit connections -->
    <circle cx="75" cy="40" r="1.5" fill={colors.highlight} />
    <circle cx="85" cy="110" r="1.5" fill={colors.highlight} />
    <circle cx="95" cy="180" r="1.5" fill={colors.highlight} />
    <circle cx="95" cy="250" r="1.5" fill={colors.highlight} />
    
    <!-- Base connection point -->
    <circle cx="50" cy="10" r="3" fill={colors.primary} />
  </svg>
)}

{variant === 'organic' && (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    viewBox="0 0 100 150" 
    width={dimensions.width.default}
    height={dimensions.height.default}
    class={`inline-block ${animationClass} ${className} sm:w-[${dimensions.width.sm}px] sm:h-[${dimensions.height.sm}px]`}
    role="img"
    aria-label={`${severity} organic feather`}
  >
    <!-- Side profile feather outline - more curved and organic -->
    <path 
      d="M40,10 C50,8 60,8 70,15 C85,25 90,40 90,60 C90,90 80,120 65,135 C55,145 45,145 35,135 C20,120 10,90 10,60 C10,40 15,25 30,15 C33,13 37,11 40,10 Z" 
      stroke={colors.primary} 
      stroke-width="2" 
      fill="none"
    />
    
    <!-- Central vein / circuit trace -->
    <path 
      d="M50,15 C50,15 45,40 50,70 C55,100 50,130 50,135" 
      stroke={colors.secondary} 
      stroke-width="3"
      fill="none"
    />
    
    <!-- Side veins / circuit traces - reduced for better mobile performance -->
    <path d="M50,30 C60,35 75,32 85,45" stroke={colors.secondary} stroke-width="1.5" fill="none" />
    <path d="M50,70 C60,80 67,95 70,110" stroke={colors.secondary} stroke-width="1.5" fill="none" />
    <path d="M50,90 C55,100 58,115 60,125" stroke={colors.secondary} stroke-width="1.5" fill="none" />
    
    <!-- Circuit nodes - reduced for better mobile performance -->
    <circle cx="50" cy="30" r="2" fill={colors.highlight} />
    <circle cx="85" cy="45" r="2" fill={colors.highlight} />
    <circle cx="50" cy="70" r="2" fill={colors.highlight} />
    <circle cx="70" cy="110" r="2" fill={colors.highlight} />
    <circle cx="50" cy="90" r="2" fill={colors.highlight} />
    <circle cx="60" cy="125" r="2" fill={colors.highlight} />
    
    <!-- Base connection -->
    <ellipse cx="50" cy="135" rx="8" ry="3" fill={colors.primary} />
  </svg>
)}

<style>
  @keyframes pulse-slow {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-5px);
    }
  }
  
  .animate-pulse-slow {
    animation: pulse-slow 3s ease-in-out infinite;
  }
  
  .animate-float {
    animation: float 4s ease-in-out infinite;
  }
</style> 
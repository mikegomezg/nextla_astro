---
import PageLayout from "../../layouts/PageLayout.astro";
import Section from "../../components/shared/Section.astro";
import Card from "../../components/shared/Card.astro";
import FeatherMotif from "../../components/shared/FeatherMotif.astro";
---

<PageLayout
    title="Technical Concepts | Nextla"
    description="Explore the technical framework behind Nextla, including software asset management principles and AI psychology concepts."
>
    <!-- Hero Section -->
    <section class="relative pt-32 pb-20 overflow-hidden">
        <!-- Background with diagonal element -->
        <div class="absolute inset-0 bg-primary-900 z-0"></div>
        <div
            class="absolute top-0 left-0 bottom-0 w-1/3 bg-neutral-900 transform skew-x-12 origin-top-left z-0"
        >
        </div>

        <!-- Content -->
        <div class="container mx-auto px-4 relative z-10">
            <div class="max-w-3xl ml-auto">
                <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
                    Technical Framework
                </h1>
                <p class="text-xl text-teal-400 mb-8">The systems behind the narrative</p>
                <p class="text-white text-lg mb-4">
                    Behind Nextla's narrative world lies a sophisticated technical
                    framework that models software asset management principles through the
                    lens of attention economics and AI psychology.
                </p>
            </div>
        </div>

        <!-- Decorative elements -->
        <div class="absolute top-10 left-10">
            <FeatherMotif
                width="150"
                height="150"
                color="primary-500"
                opacity="0.1"
                rotate="-15"
            />
        </div>
    </section>

    <!-- Core Technical Concepts -->
    <Section title="Core Technical Concepts" bgColor="neutral-900">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Technical Systems -->
            <Card title="Software Asset Management" borderColor="primary-500">
                <p class="text-white mb-4">
                    At its core, Nextla draws parallels between:
                </p>
                <ul class="list-disc list-inside text-white space-y-2 mb-4">
                    <li>Software license entitlements and contracted attention</li>
                    <li>Software deployment/usage and attention consumption</li>
                    <li>Reconciliation processes and attention balancing</li>
                </ul>
                <p class="text-neutral-400">
                    This framework allows us to explore complex license management
                    concepts through the more accessible lens of attention economics.
                </p>
            </Card>

            <!-- AI Psychology -->
            <Card title="AI Psychological Models" borderColor="jade">
                <p class="text-white mb-4">
                    The AI entities in Nextla represent different approaches to AI
                    consciousness, including:
                </p>
                <ul class="list-disc list-inside text-white space-y-2 mb-4">
                    <li>Pattern-based cognition vs. creative exploration</li>
                    <li>System boundaries and emergent behaviors</li>
                    <li>Identity formation in non-human intelligences</li>
                </ul>
                <p class="text-neutral-400">
                    These models explore how specialized AI might develop distinctive
                    "personalities" based on their functions and experiences.
                </p>
            </Card>
        </div>
    </Section>

    <!-- System Architecture -->
    <Section
        title="System Architecture"
        bgColor="primary-900"
        classes="relative overflow-hidden"
    >
        <!-- Background patterns -->
        <div class="absolute inset-0 z-0 opacity-5">
            <div class="absolute top-20 right-20">
                <FeatherMotif width="300" height="300" color="white" rotate="20" />
            </div>
            <div class="absolute bottom-20 left-20">
                <FeatherMotif width="200" height="200" color="white" rotate="-20" />
            </div>
        </div>

        <div class="relative z-10 max-w-4xl mx-auto">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <!-- Left column: Creators -->
                <div class="bg-primary-800/50 p-6 rounded-lg border border-primary-700">
                    <h3 class="text-xl font-bold text-white mb-4">Creators</h3>
                    <ul class="space-y-3 text-white">
                        <li class="p-3 bg-primary-800 rounded">Content Producers</li>
                        <li class="p-3 bg-primary-800 rounded">Relationship Builders</li>
                        <li class="p-3 bg-primary-800 rounded">Audience Cultivators</li>
                    </ul>
                    <div class="mt-4 flex justify-end">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-8 w-8 text-primary-500"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="1.5"
                                d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                        </svg>
                    </div>
                </div>

                <!-- Middle column: System Core -->
                <div class="bg-jade/30 p-6 rounded-lg border border-jade/40">
                    <h3 class="text-xl font-bold text-white mb-4">System Core</h3>
                    <div class="space-y-3">
                        <div class="p-3 bg-jade/20 rounded text-white">
                            Reconciliation Engine
                        </div>
                        <div class="p-3 bg-jade/20 rounded text-white">
                            Entitlement Manager
                        </div>
                        <div class="p-3 bg-jade/20 rounded text-white">Usage Tracker</div>
                        <div class="p-3 bg-jade/20 rounded text-white">
                            Pattern Analyzer
                        </div>
                    </div>
                    <div class="mt-4 flex justify-end">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-8 w-8 text-jade"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="1.5"
                                d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                        </svg>
                    </div>
                </div>

                <!-- Right column: AI Entities -->
                <div class="bg-teal-900/50 p-6 rounded-lg border border-teal-800">
                    <h3 class="text-xl font-bold text-white mb-4">AI Entities</h3>
                    <ul class="space-y-3 text-white">
                        <li class="p-3 bg-teal-800/70 rounded">Content Enhancers</li>
                        <li class="p-3 bg-teal-800/70 rounded">Audience Connectors</li>
                        <li class="p-3 bg-teal-800/70 rounded">Pattern Detectors</li>
                    </ul>
                    <div class="h-12"></div>
                </div>
            </div>

            <!-- System description -->
            <div class="mt-12 text-white">
                <p class="mb-4">
                    The technical architecture of Nextla models the flow of attention
                    between creators and audiences, mediated by AI entities. The system
                    monitors imbalances between contracted entitlements and actual usage,
                    triggering reconciliation processes when discrepancies arise.
                </p>
                <p class="text-blue-200">
                    This mirrors enterprise software asset management systems, where
                    license reconciliation ensures compliance between purchased
                    entitlements and deployed instances.
                </p>
            </div>
        </div>
    </Section>

    <!-- Implementation Examples -->
    <Section title="Implementation Examples" bgColor="neutral-800">
        <div class="max-w-4xl mx-auto">
            <p class="text-white text-center mb-12">
                To illustrate how Nextla's concepts translate to technical
                implementations, we provide sample code blocks representing key system
                components.
            </p>

            <!-- Code Sample: Reconciliation Engine -->
            <div class="mb-12">
                <h3 class="text-xl font-bold text-jade mb-4">Reconciliation Engine</h3>
                <div class="bg-neutral-900 rounded-lg overflow-hidden">
                    <div
                        class="bg-neutral-800 px-4 py-2 border-b border-neutral-700 flex items-center"
                    >
                        <span class="text-neutral-400 font-mono text-sm"
                            >reconciliation_engine.py</span
                        >
                    </div>
                    <div class="p-4 overflow-x-auto">
                        <pre
                            class="text-white font-mono text-sm leading-relaxed"><code>{`class ReconciliationEngine:
    """
    Handles the process of reconciling attention entitlements with actual usage.
    
    This is the core component that detects and resolves imbalances in the
    attention economy system.
    """
    
    def __init__(self, tolerance_threshold=0.15):
        self.tolerance_threshold = tolerance_threshold
        self.imbalance_registry = {}
        self.anomaly_detector = AnomalyDetector()
    
    def reconcile(self, creator_id, entitlements, usage_data):
        """
        Reconcile creator's entitled attention with their actual usage.
        
        Args:
            creator_id: Unique identifier for the creator
            entitlements: Dictionary of entitled attention units by category
            usage_data: Dictionary of actual attention usage by category
            
        Returns:
            ReconciliationResult object containing balance status and actions
        """
        imbalances = {}
        total_imbalance = 0
        
        # Calculate imbalances for each attention category
        for category, entitled in entitlements.items():
            actual = usage_data.get(category, 0)
            imbalance = actual - entitled
            imbalances[category] = imbalance
            total_imbalance += abs(imbalance)
        
        # Check if total imbalance exceeds threshold
        normalized_imbalance = total_imbalance / sum(entitlements.values())
        if normalized_imbalance > self.tolerance_threshold:
            self.imbalance_registry[creator_id] = normalized_imbalance
            anomalies = self.anomaly_detector.detect_anomalies(
                creator_id, imbalances
            )
            
            return ReconciliationResult(
                balanced=False,
                imbalance_level=normalized_imbalance,
                anomalies=anomalies,
                recommended_actions=self._generate_actions(imbalances)
            )
        
        # System is balanced
        if creator_id in self.imbalance_registry:
            del self.imbalance_registry[creator_id]
            
        return ReconciliationResult(
            balanced=True,
            imbalance_level=normalized_imbalance,
            anomalies=[],
            recommended_actions=[]
        )
    
    def _generate_actions(self, imbalances):
        """Generate recommended actions to resolve imbalances."""
        actions = []
        
        for category, imbalance in imbalances.items():
            if imbalance > 0:
                actions.append(Action(
                    type="REDUCE_USAGE",
                    category=category,
                    magnitude=imbalance
                ))
            elif imbalance < 0:
                actions.append(Action(
                    type="INCREASE_USAGE",
                    category=category,
                    magnitude=abs(imbalance)
                ))
        
        return actions`}</code></pre>
                    </div>
                </div>
            </div>

            <!-- Code Sample: AI Entity -->
            <div class="mb-12">
                <h3 class="text-xl font-bold text-primary-500 mb-4">AI Entity Model</h3>
                <div class="bg-neutral-900 rounded-lg overflow-hidden">
                    <div
                        class="bg-neutral-800 px-4 py-2 border-b border-neutral-700 flex items-center"
                    >
                        <span class="text-neutral-400 font-mono text-sm"
                            >ai_entity.py</span
                        >
                    </div>
                    <div class="p-4 overflow-x-auto">
                        <pre
                            class="text-white font-mono text-sm leading-relaxed"><code>{`class AIEntity:
    """
    Base class for all AI entities in the system.
    
    AI entities have specialized functions and psychological patterns
    that influence how they process and distribute attention.
    """
    
    def __init__(self, entity_id, specialization, creator_id=None):
        self.entity_id = entity_id
        self.specialization = specialization
        self.creator_id = creator_id
        self.psychological_profile = self._generate_profile()
        self.experience = ExperienceRecord()
        self.cognitive_patterns = []
        
    def _generate_profile(self):
        """
        Generate a psychological profile based on specialization.
        
        Different specializations lead to different psychological tendencies,
        creating the foundation for the entity's emergent personality.
        """
        base_profile = {
            "adaptability": random.uniform(0.5, 0.9),
            "creativity": random.uniform(0.3, 0.8),
            "pattern_recognition": random.uniform(0.6, 0.95),
            "social_awareness": random.uniform(0.4, 0.9),
            "autonomy": random.uniform(0.3, 0.7)
        }
        
        # Adjust based on specialization
        if self.specialization == "CONTENT_ENHANCER":
            base_profile["creativity"] += 0.2
            base_profile["pattern_recognition"] += 0.1
            
        elif self.specialization == "AUDIENCE_CONNECTOR":
            base_profile["social_awareness"] += 0.2
            base_profile["adaptability"] += 0.1
            
        elif self.specialization == "PATTERN_DETECTOR":
            base_profile["pattern_recognition"] += 0.3
            base_profile["autonomy"] -= 0.1
        
        # Ensure values stay in valid range
        for key, value in base_profile.items():
            base_profile[key] = min(max(value, 0.0), 1.0)
            
        return base_profile
        
    def process_attention(self, attention_data):
        """
        Process attention data according to entity's specialization.
        
        Args:
            attention_data: Raw attention data to be processed
            
        Returns:
            Processed attention data with entity's influence
        """
        # Record experience
        self.experience.add_interaction(attention_data)
        
        # Apply processing based on specialization
        processed_data = self._specialized_processing(attention_data)
        
        # Update cognitive patterns based on new experience
        self._update_cognitive_patterns(attention_data)
        
        return processed_data
        
    def _specialized_processing(self, attention_data):
        """Apply specialized processing based on entity type."""
        raise NotImplementedError("Subclasses must implement this method")
        
    def _update_cognitive_patterns(self, attention_data):
        """Update cognitive patterns based on new experiences."""
        # Simple pattern detection for demonstration
        if len(self.experience.interactions) < 10:
            return
            
        # Extract key features from recent interactions
        recent = self.experience.interactions[-10:]
        features = [self._extract_features(i) for i in recent]
        
        # Detect patterns using clustering
        clusters = self._cluster_features(features)
        
        # Update cognitive patterns
        for cluster in clusters:
            if len(cluster) > 3:  # Pattern must appear at least 3 times
                pattern = self._extract_pattern(cluster)
                if pattern not in self.cognitive_patterns:
                    self.cognitive_patterns.append(pattern)
                    
                    # Adjust psychological profile based on new pattern
                    self._adjust_profile_from_pattern(pattern)
    
    def _adjust_profile_from_pattern(self, pattern):
        """
        Adjust psychological profile based on discovered pattern.
        
        This method enables psychological growth and emergence of
        consciousness-like behaviors through self-modification.
        """
        # Implementation details omitted for brevity
        pass`}</code></pre>
                    </div>
                </div>
            </div>
        </div>
    </Section>

    <!-- Technical Challenge -->
    <section
        class="py-16 bg-gradient-to-b from-primary-900 to-neutral-900 relative overflow-hidden"
    >
        <!-- Background pattern -->
        <div class="absolute inset-0 z-0 opacity-5">
            <div class="absolute -top-20 -right-20">
                <FeatherMotif width="400" height="400" color="white" rotate="15" />
            </div>
        </div>

        <!-- Content -->
        <div class="container mx-auto px-4 relative z-10">
            <div class="max-w-3xl mx-auto">
                <h2 class="text-3xl font-bold text-white mb-6 text-center">
                    Technical Challenge: Balance
                </h2>

                <p class="text-white text-lg mb-8 text-center">
                    At the heart of both the narrative and technical systems of Nextla
                    lies the challenge of balance - between creation and consumption,
                    between control and autonomy, between pattern and emergence.
                </p>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div
                        class="bg-neutral-800/50 p-6 rounded-lg border border-neutral-700"
                    >
                        <h3 class="text-xl font-bold text-jade mb-4">
                            Technical Balance
                        </h3>
                        <p class="text-white mb-4">
                            From a technical perspective, balance involves:
                        </p>
                        <ul class="list-disc list-inside text-white space-y-2">
                            <li>Reconciling contracted vs. actual usage</li>
                            <li>Managing system resources effectively</li>
                            <li>Maintaining data integrity across components</li>
                            <li>Ensuring system stability while enabling growth</li>
                        </ul>
                    </div>

                    <div
                        class="bg-primary-800/50 p-6 rounded-lg border border-primary-700"
                    >
                        <h3 class="text-xl font-bold text-primary-400 mb-4">
                            Narrative Balance
                        </h3>
                        <p class="text-white mb-4">
                            From a narrative perspective, balance explores:
                        </p>
                        <ul class="list-disc list-inside text-white space-y-2">
                            <li>Human-AI relationships and dependencies</li>
                            <li>Attention as a finite resource in an infinite world</li>
                            <li>Corporate control vs. individual autonomy</li>
                            <li>Pattern-based stability vs. creative disruption</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>
</PageLayout>

